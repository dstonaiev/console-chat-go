// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessengerClient is the client API for Messenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessengerClient interface {
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginResponse, error)
	Logout(ctx context.Context, in *User, opts ...grpc.CallOption) (*Close, error)
	CreateStream(ctx context.Context, in *User, opts ...grpc.CallOption) (Messenger_CreateStreamClient, error)
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error)
	CreateGroupChat(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Close, error)
	JoinGroupChat(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Close, error)
	LeftGroupChat(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Close, error)
	ListChannels(ctx context.Context, in *User, opts ...grpc.CallOption) (*ChannelResponse, error)
}

type messengerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessengerClient(cc grpc.ClientConnInterface) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/proto.Messenger/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) Logout(ctx context.Context, in *User, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.Messenger/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) CreateStream(ctx context.Context, in *User, opts ...grpc.CallOption) (Messenger_CreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messenger_ServiceDesc.Streams[0], "/proto.Messenger/CreateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerCreateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messenger_CreateStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messengerCreateStreamClient struct {
	grpc.ClientStream
}

func (x *messengerCreateStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.Messenger/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) CreateGroupChat(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.Messenger/CreateGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) JoinGroupChat(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.Messenger/JoinGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) LeftGroupChat(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*Close, error) {
	out := new(Close)
	err := c.cc.Invoke(ctx, "/proto.Messenger/LeftGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) ListChannels(ctx context.Context, in *User, opts ...grpc.CallOption) (*ChannelResponse, error) {
	out := new(ChannelResponse)
	err := c.cc.Invoke(ctx, "/proto.Messenger/ListChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessengerServer is the server API for Messenger service.
// All implementations must embed UnimplementedMessengerServer
// for forward compatibility
type MessengerServer interface {
	Login(context.Context, *User) (*LoginResponse, error)
	Logout(context.Context, *User) (*Close, error)
	CreateStream(*User, Messenger_CreateStreamServer) error
	SendMessage(context.Context, *Message) (*Close, error)
	CreateGroupChat(context.Context, *GroupRequest) (*Close, error)
	JoinGroupChat(context.Context, *GroupRequest) (*Close, error)
	LeftGroupChat(context.Context, *GroupRequest) (*Close, error)
	ListChannels(context.Context, *User) (*ChannelResponse, error)
	mustEmbedUnimplementedMessengerServer()
}

// UnimplementedMessengerServer must be embedded to have forward compatible implementations.
type UnimplementedMessengerServer struct {
}

func (UnimplementedMessengerServer) Login(context.Context, *User) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedMessengerServer) Logout(context.Context, *User) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedMessengerServer) CreateStream(*User, Messenger_CreateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedMessengerServer) SendMessage(context.Context, *Message) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessengerServer) CreateGroupChat(context.Context, *GroupRequest) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupChat not implemented")
}
func (UnimplementedMessengerServer) JoinGroupChat(context.Context, *GroupRequest) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroupChat not implemented")
}
func (UnimplementedMessengerServer) LeftGroupChat(context.Context, *GroupRequest) (*Close, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeftGroupChat not implemented")
}
func (UnimplementedMessengerServer) ListChannels(context.Context, *User) (*ChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChannels not implemented")
}
func (UnimplementedMessengerServer) mustEmbedUnimplementedMessengerServer() {}

// UnsafeMessengerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessengerServer will
// result in compilation errors.
type UnsafeMessengerServer interface {
	mustEmbedUnimplementedMessengerServer()
}

func RegisterMessengerServer(s grpc.ServiceRegistrar, srv MessengerServer) {
	s.RegisterService(&Messenger_ServiceDesc, srv)
}

func _Messenger_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Messenger/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Messenger/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).Logout(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_CreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessengerServer).CreateStream(m, &messengerCreateStreamServer{stream})
}

type Messenger_CreateStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messengerCreateStreamServer struct {
	grpc.ServerStream
}

func (x *messengerCreateStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Messenger_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Messenger/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_CreateGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).CreateGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Messenger/CreateGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).CreateGroupChat(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_JoinGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).JoinGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Messenger/JoinGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).JoinGroupChat(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_LeftGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).LeftGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Messenger/LeftGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).LeftGroupChat(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_ListChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).ListChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Messenger/ListChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).ListChannels(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// Messenger_ServiceDesc is the grpc.ServiceDesc for Messenger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messenger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Messenger_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Messenger_Logout_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Messenger_SendMessage_Handler,
		},
		{
			MethodName: "CreateGroupChat",
			Handler:    _Messenger_CreateGroupChat_Handler,
		},
		{
			MethodName: "JoinGroupChat",
			Handler:    _Messenger_JoinGroupChat_Handler,
		},
		{
			MethodName: "LeftGroupChat",
			Handler:    _Messenger_LeftGroupChat_Handler,
		},
		{
			MethodName: "ListChannels",
			Handler:    _Messenger_ListChannels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateStream",
			Handler:       _Messenger_CreateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
